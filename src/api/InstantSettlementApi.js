/**
 * YouLend Third Party Instant Settlement API
 * Through this API you can can create Instant Settlement transactions with YouLend
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateInstantSettlementTransactionModel from '../model/CreateInstantSettlementTransactionModel';
import InstantSettlementTransactionModel from '../model/InstantSettlementTransactionModel';
import InstantSettlementView from '../model/InstantSettlementView';

/**
* InstantSettlement service.
* @module api/InstantSettlementApi
* @version v1.0
*/
export default class InstantSettlementApi {

    /**
    * Constructs a new InstantSettlementApi. 
    * @alias module:api/InstantSettlementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * An endpoint for getting your associated Instant Settlements
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InstantSettlementView>} and HTTP response
     */
    apiInstantSettlementGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [InstantSettlementView];
      return this.apiClient.callApi(
        '/api/InstantSettlement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * An endpoint for getting your associated Instant Settlements
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InstantSettlementView>}
     */
    apiInstantSettlementGet(opts) {
      return this.apiInstantSettlementGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create instant settlement transactions for a specified instant settlement
     * Sample request:                    POST /api/InstantSettlement/30000001      [{          \"transactionReferences\": [          \"ref\"          ],          \"currencyISOCode\": \"GBP\",          \"totalSettlementAmount\": 10000,          \"transactionDate\" : \"2020-02-16T18:25:43-05:00\"      },      {          \"transactionReferences\": [          \"ref\"          ],          \"currencyISOCode\": \"GBP\",          \"totalSettlementAmount\": 500,          \"transactionDate\" : \"2020-02-16T18:25:43-05:00\"      }]
     * @param {Number} instantSettlementNumber Instant settlement number (an integer)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @param {Array.<module:model/CreateInstantSettlementTransactionModel>} opts.createInstantSettlementTransactionModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiInstantSettlementInstantSettlementNumberPostWithHttpInfo(instantSettlementNumber, opts) {
      opts = opts || {};
      let postBody = opts['createInstantSettlementTransactionModel'];
      // verify the required parameter 'instantSettlementNumber' is set
      if (instantSettlementNumber === undefined || instantSettlementNumber === null) {
        throw new Error("Missing the required parameter 'instantSettlementNumber' when calling apiInstantSettlementInstantSettlementNumberPost");
      }

      let pathParams = {
        'instantSettlementNumber': instantSettlementNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/InstantSettlement/{instantSettlementNumber}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create instant settlement transactions for a specified instant settlement
     * Sample request:                    POST /api/InstantSettlement/30000001      [{          \"transactionReferences\": [          \"ref\"          ],          \"currencyISOCode\": \"GBP\",          \"totalSettlementAmount\": 10000,          \"transactionDate\" : \"2020-02-16T18:25:43-05:00\"      },      {          \"transactionReferences\": [          \"ref\"          ],          \"currencyISOCode\": \"GBP\",          \"totalSettlementAmount\": 500,          \"transactionDate\" : \"2020-02-16T18:25:43-05:00\"      }]
     * @param {Number} instantSettlementNumber Instant settlement number (an integer)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @param {Array.<module:model/CreateInstantSettlementTransactionModel>} opts.createInstantSettlementTransactionModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiInstantSettlementInstantSettlementNumberPost(instantSettlementNumber, opts) {
      return this.apiInstantSettlementInstantSettlementNumberPostWithHttpInfo(instantSettlementNumber, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * An endpoint for viewing the transactions for an Instant Settlement
     * @param {Number} instantSettlementNumber The number of the Instant Settlement product
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InstantSettlementTransactionModel>} and HTTP response
     */
    apiInstantSettlementInstantSettlementNumberTransactionsGetWithHttpInfo(instantSettlementNumber, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instantSettlementNumber' is set
      if (instantSettlementNumber === undefined || instantSettlementNumber === null) {
        throw new Error("Missing the required parameter 'instantSettlementNumber' when calling apiInstantSettlementInstantSettlementNumberTransactionsGet");
      }

      let pathParams = {
        'instantSettlementNumber': instantSettlementNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [InstantSettlementTransactionModel];
      return this.apiClient.callApi(
        '/api/InstantSettlement/{instantSettlementNumber}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * An endpoint for viewing the transactions for an Instant Settlement
     * @param {Number} instantSettlementNumber The number of the Instant Settlement product
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InstantSettlementTransactionModel>}
     */
    apiInstantSettlementInstantSettlementNumberTransactionsGet(instantSettlementNumber, opts) {
      return this.apiInstantSettlementInstantSettlementNumberTransactionsGetWithHttpInfo(instantSettlementNumber, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
